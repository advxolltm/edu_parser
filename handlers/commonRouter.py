import asyncio
from parser.SubscriptionClass import ps

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from filters.chat_type import ChatTypeFilter
from filters.check_password import CheckUserPassword
from globals.services import ServiceTypes
from keyboards.back_kb import get_back_kb
from keyboards.main_menu_kb import get_main_menu_kb
from keyboards.service_cities_kb import get_service_cities_kb
from keyboards.service_kb import get_service_kb

PARSER_INFO = """
    –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–∞ –ê–≤—Å—Ç—Ä–∏–∏ –≤ –í–µ–Ω–µ –∏ –≤ —Å–µ—Ä–≤–∏—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ VFS Global.
    –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    1. –î–æ—Å—Ç—É–ø —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–æ–ª—è
    2. –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (VFS Global –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ)
    3. –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    4. –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""


commonRouter = Router()


async def is_subs_init(message: Message):
    if not ps.isInitialized:
        await message.answer(
            "–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç"
        )
        return True
    return False


def cancel_task():
    tasks = asyncio.tasks.all_tasks()
    for task in tasks:
        if task.get_name() == "update_checker_task":
            task.cancel()


class UserState(StatesGroup):
    AwaitOfPassword = State()
    Entered = State()


@commonRouter.message(ChatTypeFilter(chat_type="private"), Command(commands=["start"]))
async def first_handler(message: Message, state: FSMContext):
    if await is_subs_init(message):
        return
    await message.answer(
        "–ü—Ä–∏–≤–µ—Çüëãüèª\n–Ø –±–æ—Ç ü§ñ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
    )
    await state.set_state(UserState.AwaitOfPassword)
    ps.unsubscribe_all(message.chat.id)


@commonRouter.message(UserState.AwaitOfPassword, CheckUserPassword())
async def entered_—Åorrect_pass_admin_panel(message: Message, state: FSMContext):
    await state.clear()
    data = {
        ServiceTypes.CONSULATE: [],
        ServiceTypes.VFS: [],
    }
    await state.set_state(UserState.Entered)
    await state.set_data(data)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüëãüèª\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_kb(False)
    )
    ps.unsubscribe_all(message.chat.id)


@commonRouter.message(UserState.AwaitOfPassword)
async def entered_incorrect_pass_admin_panel(message: Message, state: FSMContext):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@commonRouter.callback_query(UserState.Entered, F.data.startswith("main_menu"))
async def main_admin_panel(callback_query: CallbackQuery, state: FSMContext):
    ps.unsubscribe_all(callback_query.message.chat.id)
    data = await state.get_data()

    if data == {}:
        data = {
            ServiceTypes.CONSULATE: [],
            ServiceTypes.VFS: [],
        }
    if "__subscribe" in callback_query.data:
        type, city = callback_query.data.split("__")[2:]
        data[type].append(city)

    if "__unsubscribe" in callback_query.data:
        type, city = callback_query.data.split("__")[2:]
        data[type].remove(city)

    await state.set_data(data)
    if (
        data[ServiceTypes.CONSULATE].__len__() == 0
        and data[ServiceTypes.VFS].__len__() == 0
    ):
        await callback_query.message.edit_text(
            "**–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Å–µ—Ä–∞** ‚öôÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_kb(False),
            parse_mode="Markdown",
        )
    else:
        main_message = (
            "**–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Å–µ—Ä–∞** ‚öôÔ∏è\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤\n"
        )
        if data[ServiceTypes.CONSULATE].__len__() > 0:
            main_message += "\n\n"
            cities = " \n".join(data[ServiceTypes.CONSULATE])
            main_message += "**–ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –ê–≤—Å—Ç—Ä–∏–∏**: \n" + cities
            main_message += "\n\n"
        if data[ServiceTypes.VFS].__len__() > 0:
            main_message += "\n\n"
            cities = " \n".join(data[ServiceTypes.VFS])
            main_message += "**VFS Global**: \n" + cities
            main_message += "\n\n"

        main_message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback_query.message.edit_text(
            main_message,
            reply_markup=get_main_menu_kb(True),
            parse_mode="Markdown",
        )


@commonRouter.callback_query(UserState.Entered, F.data == "parser_monitore")
async def parser_monitore(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    for city in data[ServiceTypes.CONSULATE]:
        ps.subscribe(city, callback_query.message.chat.id, ServiceTypes.CONSULATE)
    for city in data[ServiceTypes.VFS]:
        ps.subscribe(city, callback_query.message.chat.id, ServiceTypes.VFS)
    await callback_query.message.edit_text(
        '–í—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç–µ —ç—Ñ–∏—Äüì£\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥‚è™"\n\n–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /start',
        reply_markup=get_back_kb(),
    )


@commonRouter.callback_query(UserState.Entered, F.data == "parser_setting")
async def parser_setting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–í–µ–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=get_service_kb()
    )


@commonRouter.callback_query(UserState.Entered, F.data.startswith("cities_choose__"))
async def city_choice_handler(callback_query: CallbackQuery, state: FSMContext):
    type = callback_query.data.split("__")[1]
    data = await state.get_data()
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ " + type.capitalize(),
        reply_markup=get_service_cities_kb(type, data[type]),
    )


@commonRouter.callback_query(UserState.Entered, F.data == "parser_info")
async def parser_setting(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(PARSER_INFO, reply_markup=get_back_kb())


@commonRouter.callback_query(F.data != None)
async def callback_handler(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω ‚öôÔ∏è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )


@commonRouter.message(ChatTypeFilter(chat_type=["private"]), F.sticker)
async def message_with_sticker(message: Message):
    await message.answer(
        "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã"
    )
    ps.unsubscribe_all(message.chat.id)


@commonRouter.message(ChatTypeFilter(chat_type=["private"]), F.animation)
async def message_with_gif(message: Message):
    await message.answer(
        "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã"
    )
    ps.unsubscribe_all(message.chat.id)


@commonRouter.message(ChatTypeFilter(chat_type=["private"]), F.photo)
async def message_with_photo(message: Message):
    await message.answer(
        "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã"
    )
    ps.unsubscribe_all(message.chat.id)


@commonRouter.message(ChatTypeFilter(chat_type=["private"]), F.text)
async def message_from_unatharize_user(message: Message):
    if await is_subs_init(message):
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    ps.unsubscribe_all(message.chat.id)
